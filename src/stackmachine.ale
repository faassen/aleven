func main {
    r30 = lh r20 0
    r31 = lh r20 1
    call loop
    sh r20 0 = r30
    sh r20 1 = r31
}

repeat loop 255 {
    r1 = lb r30 0

    # dispatch to stack instructions
    # would be nicer to have switch instruction but difficult to implement
    r2 = addi r0 0
    bne r1 r2 s1
    call n0
    target s1
    r2 = addi r2 1
    bne r1 r2 s2
    call n1
    target s2
    r2 = addi r2 1
    bne r1 r2 s3
    call dup
    target s3
    r2 = addi r2 1
    bne r1 r2 s4
    call add
    target s4
    r2 = addi r2 1
    bne r1 r2 s5
    call eq   
    target s5
    r2 = addi r2 1
    bne r1 r2 s6
    call read
    target s6
    r2 = addi r2 1
    bne r1 r2 s7
    call write
    target s7

    r30 = addi r30 1
}

# r0 is zero
# which ones are temporaries?
# r30 is pc
# r31 is stack pointer

func n0 {
    r31 = addi r31 1
    sh r31 0 = r0
}

func n1 {
    r31 = addi r31 1
    r1 = addi r0 1
    sh r31 0 = r1
}

fn dup {
    r1 = lh r31 0
    r31 = addi r31 1
    sh r31 0 = r1 
}

fn add {
    r1 = lh r31 0
    r31 = addi r31 -1
    r2 = lh r31 0
    r3 = add r1 r2
    sh r31 0 = r3
}

fn eq {
    r1 = lh r31 0
    r31 = addi r31 -1
    r2 = lh r31 0
    bne r1 r2 different
    r1 = addi r0 1
    beq r0 r0 end # should we have an unconditional jump
    target different
    r1 = addi r0 0
    target end
    sh r31 0 = r1
}

fn read {
    r1 = lh r31 0
    r2 = lh r1 0
    sh r31 r2
}

fn write {
    r1 = lh r31 0
    r31 = addi r31 -1
    r2 = lh r31 0
    r31 = addi r31 -1
    sh r2 0 = r1
}
